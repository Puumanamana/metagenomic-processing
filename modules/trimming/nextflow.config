params {
    outdir = '$PWD/trimming_results'
    adapters = "null"
    trimming = "fastp"
    trim_win_len = 10
    trim_win_qual = 25
    clip_qual = 5
    min_trim_len = 20
    min_avg_qual = 25
    hd_crop = 0
    tl_crop = 0
    hd_crop_fwd = 5
    hd_crop_rev = 5
    tl_crop_fwd = 5
    tl_crop_rev = 5
    keep_unpaired = false
}
    
process {
    withName: 'fastqc' {
        cpus = {check_max(5, 'cpus')}
        memory = {check_max(16.GB, 'memory')}
    }
    withName: 'multiqc' {
        cpus = {check_max(1, 'cpus')}
        memory = {check_max(4.GB, 'memory')}
    }
    withName: 'trimmomatic|fastp' {
        cpus = {check_max(10, 'cpus')}
        memory = {check_max(48.GB, 'memory')}
    }
}

profiles {
    docker { docker.enabled = true }
    singularity { singularity.enabled = true }
    lani { includeConfig "$baseDir/../../conf/lani.config" }
    hpc { includeConfig "$baseDir/../../conf/hpc.config" }    
    test { includeConfig "$baseDir/../../conf/test.config" }
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
